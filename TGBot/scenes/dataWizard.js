// –°–æ–∑–¥–∞—ë–º —Å—Ü–µ–Ω—É –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
import {Scenes} from 'telegraf'
import {exitScene} from './exitScene.js'


// –°–æ–∑–¥–∞—ë–º —Å—Ü–µ–Ω—É –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
const dataWizard = new Scenes.WizardScene(
	'dataWizard',
	async (ctx) => {
		ctx.scene.state.userData = {} // –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
		await ctx.reply('üìå **–®–∞–≥ 1/6**\n\n‚úè –í–≤–µ–¥–∏—Ç–µ **–ò–º—è:**', {
			parse_mode: 'Markdown',
			reply_markup: {
				keyboard: [['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']],
				resize_keyboard: true,
				one_time_keyboard: false
			}
		})
		return ctx.wizard.next()
	},
	async (ctx) => {
		if (ctx.message.text === '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å') return exitScene(ctx)
		
		ctx.scene.state.userData.name = ctx.message.text
		await ctx.reply('üìå **–®–∞–≥ 2/6**\n\n‚úè –í–≤–µ–¥–∏—Ç–µ **–§–∞–º–∏–ª–∏—é:**', {
			parse_mode: 'Markdown',
			reply_markup: {
				keyboard: [['‚¨Ö –ù–∞–∑–∞–¥', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']],
				resize_keyboard: true,
				one_time_keyboard: false
			}
		})
		return ctx.wizard.next()
	},
	async (ctx) => {
		if (ctx.message.text === '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å') return exitScene(ctx)
		if (ctx.message.text === '‚¨Ö –ù–∞–∑–∞–¥') {
			await ctx.reply('üìå **–®–∞–≥ 1/6**\n\n‚úè –í–≤–µ–¥–∏—Ç–µ **–ò–º—è:**')
			return ctx.wizard.selectStep(1)
		}
		
		ctx.scene.state.userData.surname = ctx.message.text
		await ctx.reply('üìå **–®–∞–≥ 3/6**\n\nüìû –í–≤–µ–¥–∏—Ç–µ **–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:**', {
			parse_mode: 'Markdown',
			reply_markup: {
				keyboard: [['‚¨Ö –ù–∞–∑–∞–¥', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']],
				resize_keyboard: true,
				one_time_keyboard: false
			}
		})
		return ctx.wizard.next()
	},
	async (ctx) => {
		if (ctx.message.text === '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å') return exitScene(ctx)
		if (ctx.message.text === '‚¨Ö –ù–∞–∑–∞–¥') {
			await ctx.reply('üìå **–®–∞–≥ 2/6**\n\n‚úè –í–≤–µ–¥–∏—Ç–µ **–§–∞–º–∏–ª–∏—é:**')
			return ctx.wizard.selectStep(2)
		}
		
		ctx.scene.state.userData.phone = ctx.message.text
		await ctx.reply('üìå **–®–∞–≥ 4/6**\n\nüí∞ –í–≤–µ–¥–∏—Ç–µ **–º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∞—Ä–µ–Ω–¥—ã: üí∂**', {
			parse_mode: 'Markdown',
			reply_markup: {
				keyboard: [['‚¨Ö –ù–∞–∑–∞–¥', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']],
				resize_keyboard: true,
				one_time_keyboard: false
			}
		})
		return ctx.wizard.next()
	},
	async (ctx) => {
		if (ctx.message.text === '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å') return exitScene(ctx)
		if (ctx.message.text === '‚¨Ö –ù–∞–∑–∞–¥') {
			await ctx.reply('üìå **–®–∞–≥ 3/6**\n\nüìû –í–≤–µ–¥–∏—Ç–µ **–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:**')
			return ctx.wizard.selectStep(3)
		}
		
		ctx.scene.state.userData.minPrice = ctx.message.text
		await ctx.reply('üìå **–®–∞–≥ 5/6**\n\nüí∞ –í–≤–µ–¥–∏—Ç–µ **–º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∞—Ä–µ–Ω–¥—ã: üí∂**', {
			parse_mode: 'Markdown',
			reply_markup: {
				keyboard: [['‚¨Ö –ù–∞–∑–∞–¥', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']],
				resize_keyboard: true,
				one_time_keyboard: false
			}
		})
		return ctx.wizard.next()
	},
	async (ctx) => {
		if (ctx.message.text === '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å') return exitScene(ctx)
		if (ctx.message.text === '‚¨Ö –ù–∞–∑–∞–¥') {
			await ctx.reply('üìå **–®–∞–≥ 4/6**\n\nüí∞ –í–≤–µ–¥–∏—Ç–µ **–º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∞—Ä–µ–Ω–¥—ã: üí∂**')
			return ctx.wizard.selectStep(4)
		}
		
		ctx.scene.state.userData.maxPrice = ctx.message.text
		await ctx.reply('üìå **–®–∞–≥ 6/6**\n\nüè† –í–≤–µ–¥–∏—Ç–µ **–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:**', {
			parse_mode: 'Markdown',
			reply_markup: {
				keyboard: [['‚¨Ö –ù–∞–∑–∞–¥', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']],
				resize_keyboard: true,
				one_time_keyboard: false
			}
		})
		return ctx.wizard.next()
	},
	async (ctx) => {
		if (ctx.message.text === '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å') return exitScene(ctx)
		if (ctx.message.text === '‚¨Ö –ù–∞–∑–∞–¥') {
			await ctx.reply('üìå **–®–∞–≥ 5/6**\n\nüí∞ –í–≤–µ–¥–∏—Ç–µ **–º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∞—Ä–µ–Ω–¥—ã: üí∂**')
			return ctx.wizard.selectStep(5)
		}
		
		ctx.scene.state.userData.rooms = ctx.message.text
		
		await ctx.reply(
			`‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n` +
			`   ‚úÖ *–í–ê–®–ò –î–ê–ù–ù–´–ï*  \n` +
			`‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n` +
			`üë§ *–ò–º—è:* ${ctx.scene.state.userData.name || '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
			`üè∑ *–§–∞–º–∏–ª–∏—è:* ${ctx.scene.state.userData.surname || '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
			`üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${ctx.scene.state.userData.phone || '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
			`üí∞ *–ú–∏–Ω. —Ü–µ–Ω–∞:* ${ctx.scene.state.userData.minPrice ? ctx.scene.state.userData.minPrice + ' ‚ÇΩ' : '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
			`üí∞ *–ú–∞–∫—Å. —Ü–µ–Ω–∞:* ${ctx.scene.state.userData.maxPrice ? ctx.scene.state.userData.maxPrice + ' ‚ÇΩ' : '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
			`üè† *–ö–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç:* ${ctx.scene.state.userData.rooms || '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n` +
			`üì© *–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.*`,
			{
				parse_mode: 'Markdown',
				reply_markup: {
					keyboard: [
						['‚¨Ö –ù–∞–∑–∞–¥', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'],
						['–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ']
					],
					resize_keyboard: true,
					one_time_keyboard: false
				}
			}
		)
		return ctx.wizard.next()
	},
	async (ctx) => {
		if (ctx.message.text === '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å') return exitScene(ctx)
		if (ctx.message.text === '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ') {
			// –ü–û–î–¢–í–ï–†–ñ–î–ê–ï–ú –ò –ü–ï–†–ï–•–û–î–ò–ú –ù–ê –°–õ–ï–î –®–ê–ì –≠–¢–û –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–°–´–õ–ö–ò –î–õ–Ø –û–ü–õ–ê–¢–´
		}
		if (ctx.message.text === '‚¨Ö –ù–∞–∑–∞–¥') {
			await ctx.reply('üìå **–®–∞–≥ 6/6**\n\nüè† –í–≤–µ–¥–∏—Ç–µ **–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:**', {
				parse_mode: 'Markdown',
				reply_markup: {
					keyboard: [['‚¨Ö –ù–∞–∑–∞–¥', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']],
					resize_keyboard: true,
					one_time_keyboard: false
				}
			})
			return ctx.wizard.selectStep(6)
		}
	}
)


export default dataWizard